{"ast":null,"code":"import { all, takeLatest, delay, put, fork, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortid from 'shortid';\n\nfunction loadPostsAPI(data) {\n  return axios.post('/api/post', data);\n}\n\n;\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\n;\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: result.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\n;\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\n;\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\n;\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n;\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n;\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n;\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n;","map":{"version":3,"sources":["/Users/kimwoojong/Desktop/Dev/prepare/front/sagas/post.js"],"names":["all","takeLatest","delay","put","fork","throttle","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","loadPostsAPI","data","post","loadPosts","action","type","err","error","response","addPostAPI","addPost","result","call","id","generate","content","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, takeLatest, delay, put, fork, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n\tADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n\tADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n\tREMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n\tLOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortid from 'shortid';\n\nfunction loadPostsAPI(data) {\n\treturn axios.post('/api/post', data);\n};\n\nfunction* loadPosts(action) {\n\ttry {\n\t\t// const result = yield call(loadPostsAPI, action.data);\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: LOAD_POSTS_SUCCESS,\n\t\t\tdata: generateDummyPost(10),\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOAD_POSTS_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction addPostAPI(data) {\n\treturn axios.post('/api/post', data);\n};\n\nfunction* addPost(action) {\n\ttry {\n\t\tconst result = yield call(addPostAPI, action.data);\n\t\tconst id = shortid.generate();\n\t\tyield put({\n\t\t\ttype: ADD_POST_SUCCESS,\n\t\t\tdata: {\n\t\t\t\tid,\n\t\t\t\tcontent: result.data,\n\t\t\t},\n\t\t});\n\t\tyield put({\n\t\t\ttype: ADD_POST_TO_ME,\n\t\t\tdata: id,\n\t\t})\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: ADD_POST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction removePostAPI(data) {\n\treturn axios.delete('/api/post', data);\n};\n\nfunction* removePost(action) {\n\ttry {\n\t\t// const result = yield call(addPostAPI, action.data);\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_OF_ME,\n\t\t\tdata: action.data,\n\t\t})\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction addCommentAPI(data) {\n\treturn axios.post(`/api/post/${data.postId}/comment`, data);\n};\n\nfunction* addComment(action) {\n\ttry {\n\t\t// const result = yield call(addCommentAPI, action.data);\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction* watchLoadPosts() {\n\tyield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n};\n\nfunction* watchAddPost() {\n\tyield takeLatest(ADD_POST_REQUEST, addPost);\n};\n\nfunction* watchRemovePost() {\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost);\n};\n\nfunction* watchAddComment() {\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\n};\n\nexport default function* postSaga() {\n\tyield all([\n\t\tfork(watchLoadPosts),\n\t\tfork(watchAddPost),\n\t\tfork(watchRemovePost),\n\t\tfork(watchAddComment),\n\t]);\n};"]},"metadata":{},"sourceType":"module"}
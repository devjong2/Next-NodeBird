{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, takeLatest, delay, put, fork } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\n;\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data // data: result.data,\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\n;\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\n;\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'LOG_OUT_SUCCESS' // data: result.data,\n\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: 'LOG_OUT_FAILURE',\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\n;\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\n;\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\n;\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n;","map":{"version":3,"sources":["/Users/kimwoojong/Desktop/Dev/prepare/front/sagas/user.js"],"names":["logIn","logOut","watchLogIn","watchLogOut","userSaga","all","takeLatest","delay","put","fork","axios","logInAPI","data","post","action","type","response","logOutAPI"],"mappings":";;oDAOUA,K;qDAqBAC,M;qDAgBAC,U;qDAGAC,W;qDAIeC,Q;;AAnDzB,SAASC,GAAT,EAAcC,UAAd,EAA0BC,KAA1B,EAAiCC,GAAjC,EAAsCC,IAAtC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACvB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACA;;AAAA;;AAED,SAAUZ,KAAV,CAAgBc,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMP,KAAK,CAAC,IAAD,CAAX;;AAHF;AAAA;AAIE,iBAAMC,GAAG,CAAC;AACTO,YAAAA,IAAI,EAAE,gBADG;AAETH,YAAAA,IAAI,EAAEE,MAAM,CAACF,IAFJ,CAGT;;AAHS,WAAD,CAAT;;AAJF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUE,iBAAMJ,GAAG,CAAC;AACTO,YAAAA,IAAI,EAAE,gBADG;AAETH,YAAAA,IAAI,EAAE,YAAII,QAAJ,CAAaJ;AAFV,WAAD,CAAT;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeC;;AAED,SAASK,SAAT,GAAqB;AACpB,SAAOP,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACA;;AAAA;;AAED,SAAUZ,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMM,KAAK,CAAC,IAAD,CAAX;;AAHF;AAAA;AAIE,iBAAMC,GAAG,CAAC;AACTO,YAAAA,IAAI,EAAE,iBADG,CAET;;AAFS,WAAD,CAAT;;AAJF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASE,iBAAMP,GAAG,CAAC;AACTO,YAAAA,IAAI,EAAE,iBADG;AAETH,YAAAA,IAAI,EAAE,aAAII,QAAJ,CAAaJ;AAFV,WAAD,CAAT;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcC;;AAED,SAAUV,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMI,UAAU,CAAC,gBAAD,EAAmBN,KAAnB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEC;;AACD,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMG,UAAU,CAAC,iBAAD,EAAoBL,MAApB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEC;AAED,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,iBAAMC,GAAG,CAAC,CACTI,IAAI,CAACP,UAAD,CADK,EAETO,IAAI,CAACN,WAAD,CAFK,CAAD,CAAT;;AADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKd","sourcesContent":["import { all, takeLatest, delay, put, fork } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n\treturn axios.post('/api/login', data);\n};\n\nfunction* logIn(action) {\n\ttry {\n\t\t// const result = yield call(logInAPI, action.data);\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: 'LOG_IN_SUCCESS',\n\t\t\tdata: action.data,\n\t\t\t// data: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: 'LOG_IN_FAILURE',\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n};\n\nfunction logOutAPI() {\n\treturn axios.post('/api/logout');\n};\n\nfunction* logOut() {\n\ttry {\n\t\t// const result = yield call(logOutAPI);\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: 'LOG_OUT_SUCCESS',\n\t\t\t// data: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: 'LOG_OUT_FAILURE',\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n};\n\nfunction* watchLogIn() {\n\tyield takeLatest('LOG_IN_REQUEST', logIn);\n};\nfunction* watchLogOut() {\n\tyield takeLatest('LOG_OUT_REQUEST', logOut);\n};\n\nexport default function* userSaga() {\n\tyield all([\n\t\tfork(watchLogIn),\n\t\tfork(watchLogOut),\n\t])\n};"]},"metadata":{},"sourceType":"module"}
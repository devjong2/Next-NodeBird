{"ast":null,"code":"import { all, takeLatest, delay, put, fork, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction likePostAPI() {\n  return axios.get('/posts');\n}\n\n;\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction unLikePostAPI() {\n  return axios.get('/posts');\n}\n\n;\n\nfunction* unLikePost(action) {\n  try {\n    const result = yield call(unLikePostAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction loadPostsAPI() {\n  return axios.get('/posts');\n}\n\n;\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\n;\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\n;\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\n;\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction* watchLikePost() {\n  yield throttle(5000, LIKE_POST_REQUEST, likePost);\n}\n\n;\n\nfunction* watchUnLikePost() {\n  yield throttle(5000, UNLIKE_POST_REQUEST, unLikePost);\n}\n\n;\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\n;\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n;\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n;\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n;\nexport default function* postSaga() {\n  yield all([fork(watchLikePost), fork(watchUnLikePost), fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n;","map":{"version":3,"sources":["/Users/kimwoojong/Desktop/Dev/prepare/front/sagas/post.js"],"names":["all","takeLatest","delay","put","fork","throttle","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","likePostAPI","get","likePost","action","result","data","type","err","error","response","unLikePostAPI","unLikePost","loadPostsAPI","loadPosts","addPostAPI","post","content","addPost","id","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","console","watchLikePost","watchUnLikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, takeLatest, delay, put, fork, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n\tADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n\tADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n\tREMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n\tLOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction likePostAPI() {\n\treturn axios.get('/posts');\n};\n\nfunction* likePost(action) {\n\ttry {\n\t\tconst result = yield call(likePostAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LOAD_POSTS_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOAD_POSTS_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction unLikePostAPI() {\n\treturn axios.get('/posts');\n};\n\nfunction* unLikePost(action) {\n\ttry {\n\t\tconst result = yield call(unLikePostAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LOAD_POSTS_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOAD_POSTS_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction loadPostsAPI() {\n\treturn axios.get('/posts');\n};\n\nfunction* loadPosts(action) {\n\ttry {\n\t\tconst result = yield call(loadPostsAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LOAD_POSTS_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOAD_POSTS_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction addPostAPI(data) {\n\treturn axios.post('/post', { content: data });\n};\n\nfunction* addPost(action) {\n\ttry {\n\t\tconst result = yield call(addPostAPI, action.data);\n\t\tyield put({\n\t\t\ttype: ADD_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t\tyield put({\n\t\t\ttype: ADD_POST_TO_ME,\n\t\t\tdata: result.data.id,\n\t\t})\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: ADD_POST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction removePostAPI(data) {\n\treturn axios.delete('/api/post', data);\n};\n\nfunction* removePost(action) {\n\ttry {\n\t\t// const result = yield call(addPostAPI, action.data);\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_OF_ME,\n\t\t\tdata: action.data,\n\t\t})\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction addCommentAPI(data) {\n\treturn axios.post(`/post/${data.postId}/comment`, data);\n};\n\nfunction* addComment(action) {\n\ttry {\n\t\tconst result = yield call(addCommentAPI, action.data);\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction* watchLikePost() {\n\tyield throttle(5000, LIKE_POST_REQUEST, likePost);\n};\n\nfunction* watchUnLikePost() {\n\tyield throttle(5000, UNLIKE_POST_REQUEST, unLikePost);\n};\n\nfunction* watchLoadPosts() {\n\tyield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n};\n\nfunction* watchAddPost() {\n\tyield takeLatest(ADD_POST_REQUEST, addPost);\n};\n\nfunction* watchRemovePost() {\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost);\n};\n\nfunction* watchAddComment() {\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\n};\n\nexport default function* postSaga() {\n\tyield all([\n\t\tfork(watchLikePost),\n\t\tfork(watchUnLikePost),\n\t\tfork(watchLoadPosts),\n\t\tfork(watchAddPost),\n\t\tfork(watchRemovePost),\n\t\tfork(watchAddComment),\n\t]);\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log(action);\n  return next(action);\n};\n\nconst confiqureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(confiqureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/kimwoojong/Desktop/Dev/prepare/front/store/configureStore.js"],"names":["createWrapper","createStore","compose","applyMiddleware","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","confiqureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,KAArB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6BC,IAAD,IAAWC,MAAD,IAAY;AAC1EC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOD,IAAI,CAACC,MAAD,CAAX;AACA,CAHD;;AAKA,MAAMG,cAAc,GAAE,MAAM;AAC3B,QAAMC,cAAc,GAAGX,oBAAoB,EAA3C;AACA,QAAMY,WAAW,GAAG,CAACD,cAAD,EAAiBR,gBAAjB,CAApB;AACA,QAAMU,QAAQ,GAAG,QACdhB,OAAO,CAACC,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CADO,GAEdb,mBAAmB,CAACD,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CAFtB;AAGA,QAAME,KAAK,GAAGlB,WAAW,CAACK,OAAD,EAAUY,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBd,QAAnB,CAAjB;AACA,SAAOY,KAAP;AACA,CATD;;AAWA,MAAMG,OAAO,GAAGtB,aAAa,CAACe,cAAD,EAAiB;AAC7CQ,EAAAA,KAAK;AADwC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducer from '../reducers';\nimport rootSaga from '../';\n\nconst loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\n\tconsole.log(action);\n\treturn next(action);\n};\n\nconst confiqureStore= () => {\n\tconst sagaMiddleware = createSagaMiddleware();\n\tconst middlewares = [sagaMiddleware, loggerMiddleware];\n\tconst enhancer = process.env.NODE_ENV === 'production'\n\t\t? compose(applyMiddleware(...middlewares))\n\t\t: composeWithDevTools(applyMiddleware(...middlewares))\n\tconst store = createStore(reducer, enhancer);\n\tstore.sagaTask = sagaMiddleware.run(rootSaga);\n\treturn store;\n};\n\nconst wrapper = createWrapper(confiqureStore, {\n\tdebug: process.env.NODE_ENV === 'development',\n});\n\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}
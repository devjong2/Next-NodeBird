{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, takeLatest, delay, put, fork } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\n;\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'ADD_POST_SUCCESS' // data: result.data,\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'ADD_POST_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\n;\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('ADD_POST_REQUEST', addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\n;\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n;","map":{"version":3,"sources":["/Users/kimwoojong/Desktop/Dev/prepare/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","all","takeLatest","delay","put","fork","axios","addPostAPI","data","post","action","type","response"],"mappings":";;oDAOUA,O;qDAgBAC,Y;qDAIeC,Q;;AA3BzB,SAASC,GAAT,EAAcC,UAAd,EAA0BC,KAA1B,EAAiCC,GAAjC,EAAsCC,IAAtC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACzB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACA;;AAAA;;AAED,SAAUV,OAAV,CAAkBY,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMP,KAAK,CAAC,IAAD,CAAX;;AAHF;AAAA;AAIE,iBAAMC,GAAG,CAAC;AACTO,YAAAA,IAAI,EAAE,kBADG,CAET;;AAFS,WAAD,CAAT;;AAJF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASE,iBAAMP,GAAG,CAAC;AACTO,YAAAA,IAAI,EAAE,kBADG;AAETH,YAAAA,IAAI,EAAE,YAAII,QAAJ,CAAaJ;AAFV,WAAD,CAAT;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcC;;AAED,SAAUT,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMG,UAAU,CAAC,kBAAD,EAAqBJ,OAArB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEC;AAED,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,iBAAMC,GAAG,CAAC,CACTI,IAAI,CAACN,YAAD,CADK,CAAD,CAAT;;AADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAId","sourcesContent":["import { all, takeLatest, delay, put, fork } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction addPostAPI(data) {\n\treturn axios.post('/api/post', data);\n};\n\nfunction* addPost(action) {\n\ttry {\n\t\t// const result = yield call(addPostAPI, action.data);\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: 'ADD_POST_SUCCESS',\n\t\t\t// data: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: 'ADD_POST_FAILURE',\n\t\t\tdata: err.response.data,\n\t\t});\n\t}\n};\n\nfunction* watchAddPost() {\n\tyield takeLatest('ADD_POST_REQUEST', addPost);\n};\n\nexport default function* postSaga() {\n\tyield all([\n\t\tfork(watchAddPost),\n\t]);\n};"]},"metadata":{},"sourceType":"module"}
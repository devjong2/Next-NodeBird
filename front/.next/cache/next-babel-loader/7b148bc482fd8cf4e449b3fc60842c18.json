{"ast":null,"code":"import { all, takeLatest, delay, put, fork } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortid from 'shortid';\n\nfunction loadPostsAPI(data) {\n  return axios.post('/api/post', data);\n}\n\n;\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\n;\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\n;\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\n;\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\n;\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n;\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n;\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n;\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n;","map":{"version":3,"sources":["/Users/kimwoojong/Desktop/Dev/prepare/front/sagas/post.js"],"names":["all","takeLatest","delay","put","fork","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","loadPostsAPI","data","post","loadPosts","action","id","generate","type","content","err","LOAD_POSTS_FAILURE","error","response","addPostAPI","addPost","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga","watchLoadPost"],"mappings":"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","sourcesContent":["import { all, takeLatest, delay, put, fork } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n\tADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n\tADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n\tREMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n\tLOAD_POSTS_REQUEST,\n\tLOAD_POSTS_SUCCESS,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortid from 'shortid';\n\nfunction loadPostsAPI(data) {\n\treturn axios.post('/api/post', data);\n};\n\nfunction* loadPosts(action) {\n\ttry {\n\t\t// const result = yield call(addPostAPI, action.data);\n\t\tyield delay(1000);\n\t\tconst id = shortid.generate();\n\t\tyield put({\n\t\t\ttype: LOAD_POSTS_SUCCESS,\n\t\t\tdata: {\n\t\t\t\tid,\n\t\t\t\tcontent: action.data,\n\t\t\t},\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOAD_POSTS_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction addPostAPI(data) {\n\treturn axios.post('/api/post', data);\n};\n\nfunction* addPost(action) {\n\ttry {\n\t\t// const result = yield call(addPostAPI, action.data);\n\t\tyield delay(1000);\n\t\tconst id = shortid.generate();\n\t\tyield put({\n\t\t\ttype: ADD_POST_SUCCESS,\n\t\t\tdata: {\n\t\t\t\tid,\n\t\t\t\tcontent: action.data,\n\t\t\t},\n\t\t});\n\t\tyield put({\n\t\t\ttype: ADD_POST_TO_ME,\n\t\t\tdata: id,\n\t\t})\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: ADD_POST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction removePostAPI(data) {\n\treturn axios.delete('/api/post', data);\n};\n\nfunction* removePost(action) {\n\ttry {\n\t\t// const result = yield call(addPostAPI, action.data);\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_OF_ME,\n\t\t\tdata: action.data,\n\t\t})\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction addCommentAPI(data) {\n\treturn axios.post(`/api/post/${data.postId}/comment`, data);\n};\n\nfunction* addComment(action) {\n\ttry {\n\t\t// const result = yield call(addCommentAPI, action.data);\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction* watchLoadPosts() {\n\tyield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n};\n\nfunction* watchAddPost() {\n\tyield takeLatest(ADD_POST_REQUEST, addPost);\n};\n\nfunction* watchRemovePost() {\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost);\n};\n\nfunction* watchAddComment() {\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\n};\n\nexport default function* postSaga() {\n\tyield all([\n\t\tfork(watchLoadPost),\n\t\tfork(watchAddPost),\n\t\tfork(watchRemovePost),\n\t\tfork(watchAddComment),\n\t]);\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, takeLatest, delay, put, fork } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\nimport shortid from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\n;\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortid.generate();\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\n;\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\n;\n\nfunction removePost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function removePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortid.generate();\n          _context2.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n\n;\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment\"), data);\n}\n\n;\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS // data: result.data,\n\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\n;\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\n;\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\n;\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\n;\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n;","map":{"version":3,"sources":["/Users/kimwoojong/Desktop/Dev/prepare/front/sagas/post.js"],"names":["addPost","removePost","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga","all","takeLatest","delay","put","fork","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","ADD_POST_TO_ME","shortid","addPostAPI","data","post","action","id","generate","type","content","error","response","removePostAPI","addCommentAPI","postId"],"mappings":"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","sourcesContent":["import { all, takeLatest, delay, put, fork } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n\tADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n\tADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n\tREMOVE_POST_REQUEST,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\nimport shortid from 'shortid';\n\nfunction addPostAPI(data) {\n\treturn axios.post('/api/post', data);\n};\n\nfunction* addPost(action) {\n\ttry {\n\t\t// const result = yield call(addPostAPI, action.data);\n\t\tyield delay(1000);\n\t\tconst id = shortid.generate();\n\t\tyield put({\n\t\t\ttype: ADD_POST_SUCCESS,\n\t\t\tdata: {\n\t\t\t\tid,\n\t\t\t\tcontent: action.data,\n\t\t\t},\n\t\t});\n\t\tyield put({\n\t\t\ttype: ADD_POST_TO_ME,\n\t\t\tdata: id,\n\t\t})\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: ADD_POST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction removePostAPI(data) {\n\treturn axios.post('/api/post', data);\n};\n\nfunction* removePost(action) {\n\ttry {\n\t\t// const result = yield call(addPostAPI, action.data);\n\t\tyield delay(1000);\n\t\tconst id = shortid.generate();\n\t\tyield put({\n\t\t\ttype: ADD_POST_SUCCESS,\n\t\t\tdata: {\n\t\t\t\tid,\n\t\t\t\tcontent: action.data,\n\t\t\t},\n\t\t});\n\t\tyield put({\n\t\t\ttype: ADD_POST_TO_ME,\n\t\t\tdata: id,\n\t\t})\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: ADD_POST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction addCommentAPI(data) {\n\treturn axios.post(`/api/post/${data.postId}/comment`, data);\n};\n\nfunction* addComment(action) {\n\ttry {\n\t\t// const result = yield call(addCommentAPI, action.data);\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_SUCCESS,\n\t\t\t// data: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction* watchAddPost() {\n\tyield takeLatest(ADD_POST_REQUEST, addPost);\n};\n\nfunction* watchRemovePost() {\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost);\n};\n\nfunction* watchAddComment() {\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\n};\n\nexport default function* postSaga() {\n\tyield all([\n\t\tfork(watchAddPost),\n\t\tfork(watchRemovePost),\n\t\tfork(watchAddComment),\n\t]);\n};"]},"metadata":{},"sourceType":"module"}
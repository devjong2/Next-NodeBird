{"ast":null,"code":"import { all, takeLatest, delay, put, fork, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction likePostAPI() {\n  return axios.get('/posts');\n}\n\n;\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction unLikePostAPI() {\n  return axios.get('/posts');\n}\n\n;\n\nfunction* unLikePost(action) {\n  try {\n    const result = yield call(unLikePostAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction loadPostsAPI() {\n  return axios.get('/posts');\n}\n\n;\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\n;\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\n;\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\n;\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n;\n\nfunction* watchLikePost() {\n  yield throttle(5000, LIKE_POST_REQUEST, likePost);\n}\n\n;\n\nfunction* watchUnLikePost() {\n  yield throttle(5000, UNLIKE_POST_REQUEST, unLikePost);\n}\n\n;\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\n;\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n;\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n;\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n;\nexport default function* postSaga() {\n  yield all([fork(watchLikePost), fork(watchUnLikePost), fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n;","map":{"version":3,"sources":["/Users/kimwoojong/Desktop/Dev/prepare/front/sagas/post.js"],"names":["all","takeLatest","delay","put","fork","throttle","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","likePostAPI","get","likePost","action","result","data","type","err","LIKE","error","response","unLikePostAPI","unLikePost","loadPostsAPI","loadPosts","addPostAPI","post","content","addPost","id","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","console","watchLikePost","watchUnLikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, takeLatest, delay, put, fork, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n\tADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n\tADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n\tREMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n\tLOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\n\tLIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS,\n\tUNLIKE_POST_SUCCESS,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction likePostAPI() {\n\treturn axios.get('/posts');\n};\n\nfunction* likePost(action) {\n\ttry {\n\t\tconst result = yield call(likePostAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LIKE_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LIKE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction unLikePostAPI() {\n\treturn axios.get('/posts');\n};\n\nfunction* unLikePost(action) {\n\ttry {\n\t\tconst result = yield call(unLikePostAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LOAD_POSTS_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOAD_POSTS_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction loadPostsAPI() {\n\treturn axios.get('/posts');\n};\n\nfunction* loadPosts(action) {\n\ttry {\n\t\tconst result = yield call(loadPostsAPI, action.data);\n\t\tyield put({\n\t\t\ttype: LOAD_POSTS_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: LOAD_POSTS_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction addPostAPI(data) {\n\treturn axios.post('/post', { content: data });\n};\n\nfunction* addPost(action) {\n\ttry {\n\t\tconst result = yield call(addPostAPI, action.data);\n\t\tyield put({\n\t\t\ttype: ADD_POST_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t\tyield put({\n\t\t\ttype: ADD_POST_TO_ME,\n\t\t\tdata: result.data.id,\n\t\t})\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: ADD_POST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction removePostAPI(data) {\n\treturn axios.delete('/api/post', data);\n};\n\nfunction* removePost(action) {\n\ttry {\n\t\t// const result = yield call(addPostAPI, action.data);\n\t\tyield delay(1000);\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_SUCCESS,\n\t\t\tdata: action.data,\n\t\t});\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_OF_ME,\n\t\t\tdata: action.data,\n\t\t})\n\t} catch (err) {\n\t\tyield put({\n\t\t\ttype: REMOVE_POST_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction addCommentAPI(data) {\n\treturn axios.post(`/post/${data.postId}/comment`, data);\n};\n\nfunction* addComment(action) {\n\ttry {\n\t\tconst result = yield call(addCommentAPI, action.data);\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_SUCCESS,\n\t\t\tdata: result.data,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tyield put({\n\t\t\ttype: ADD_COMMENT_FAILURE,\n\t\t\terror: err.response.data,\n\t\t});\n\t}\n};\n\nfunction* watchLikePost() {\n\tyield throttle(5000, LIKE_POST_REQUEST, likePost);\n};\n\nfunction* watchUnLikePost() {\n\tyield throttle(5000, UNLIKE_POST_REQUEST, unLikePost);\n};\n\nfunction* watchLoadPosts() {\n\tyield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n};\n\nfunction* watchAddPost() {\n\tyield takeLatest(ADD_POST_REQUEST, addPost);\n};\n\nfunction* watchRemovePost() {\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost);\n};\n\nfunction* watchAddComment() {\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment);\n};\n\nexport default function* postSaga() {\n\tyield all([\n\t\tfork(watchLikePost),\n\t\tfork(watchUnLikePost),\n\t\tfork(watchLoadPosts),\n\t\tfork(watchAddPost),\n\t\tfork(watchRemovePost),\n\t\tfork(watchAddComment),\n\t]);\n};"]},"metadata":{},"sourceType":"module"}
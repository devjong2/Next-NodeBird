{"ast":null,"code":"import shortid from 'shortid';\nimport produce from 'immer';\nimport faker, { fake } from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = initialState.mainPosts = initialState.mainPosts.concat(Array(20).fill().map(() => ({\n  id: shortid.generate(),\n  User: {\n    id: shortid.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.imageUrl()\n  }],\n  Comments: [{\n    User: {\n      id: shortid.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n})));\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPosts = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '바보~'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '바보~'\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPosts(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      // \tconst postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n      // \tconst post = { ...state.mainPosts[postIndex] };\n      // \tpost.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // \tconst mainPosts = [...state.mainPosts];\n      // \tmainPosts[postIndex] = post;\n      // \treturn {\n      // \t\t...state,\n      // \t\tmainPosts,\n      // \t\taddCommentLoading: false,\n      // \t\taddCommentDone: true,\n      // \t};\n      // }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false, draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n\n    ;\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/kimwoojong/Desktop/Dev/prepare/front/reducers/post.js"],"names":["shortid","produce","faker","fake","initialState","mainPosts","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","concat","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","imageUrl","Comments","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPosts","dummyComment","reducer","state","action","draft","unshift","error","removePostLoading","removePostDone","removePostError","filter","v","post","find","postId"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAOC,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC3BC,EAAAA,SAAS,EAAE,EADgB;AAE3BC,EAAAA,UAAU,EAAE,EAFe;AAG3BC,EAAAA,cAAc,EAAE,KAHW;AAI3BC,EAAAA,WAAW,EAAE,KAJc;AAK3BC,EAAAA,YAAY,EAAE,IALa;AAO3BC,EAAAA,iBAAiB,EAAE,KAPQ;AAQ3BC,EAAAA,cAAc,EAAE,KARW;AAS3BC,EAAAA,eAAe,EAAE;AATU,CAArB;AAYP,OAAO,MAAMC,iBAAiB,GAE9BT,YAAY,CAACC,SAAb,GAAyBD,YAAY,CAACC,SAAb,CAAuBS,MAAvB,CACxBC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,GAAiBC,GAAjB,CAAqB,OAAO;AAC3BC,EAAAA,EAAE,EAAElB,OAAO,CAACmB,QAAR,EADuB;AAE3BC,EAAAA,IAAI,EAAE;AACLF,IAAAA,EAAE,EAAElB,OAAO,CAACmB,QAAR,EADC;AAELE,IAAAA,QAAQ,EAAEnB,KAAK,CAACoB,IAAN,CAAWC,QAAX;AAFL,GAFqB;AAM3BC,EAAAA,OAAO,EAAEtB,KAAK,CAACuB,KAAN,CAAYC,SAAZ,EANkB;AAO3BC,EAAAA,MAAM,EAAE,CAAC;AACRC,IAAAA,GAAG,EAAE1B,KAAK,CAAC2B,KAAN,CAAYC,QAAZ;AADG,GAAD,CAPmB;AAU3BC,EAAAA,QAAQ,EAAE,CAAC;AACVX,IAAAA,IAAI,EAAE;AACLF,MAAAA,EAAE,EAAElB,OAAO,CAACmB,QAAR,EADC;AAELE,MAAAA,QAAQ,EAAEnB,KAAK,CAACoB,IAAN,CAAWC,QAAX;AAFL,KADI;AAKVC,IAAAA,OAAO,EAAEtB,KAAK,CAACuB,KAAN,CAAYO,QAAZ;AALC,GAAD;AAViB,CAAP,CAArB,CADwB,CAFlB;AAuBP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;AACjCC,EAAAA,IAAI,EAAEX,gBAD2B;AAEjCU,EAAAA;AAFiC,CAAX,CAAhB;AAKP,OAAO,MAAME,UAAU,GAAIF,IAAD,KAAW;AACpCC,EAAAA,IAAI,EAAEL,mBAD8B;AAEpCI,EAAAA;AAFoC,CAAX,CAAnB;;AAKP,MAAMG,UAAU,GAAIH,IAAD,KAAW;AAC7BzB,EAAAA,EAAE,EAAEyB,IAAI,CAACzB,EADoB;AAE7BM,EAAAA,OAAO,EAAEmB,IAAI,CAACnB,OAFe;AAG7BJ,EAAAA,IAAI,EAAE;AACLF,IAAAA,EAAE,EAAE,CADC;AAELG,IAAAA,QAAQ,EAAE;AAFL,GAHuB;AAO7BM,EAAAA,MAAM,EAAE,EAPqB;AAQ7BI,EAAAA,QAAQ,EAAE;AARmB,CAAX,CAAnB;;AAWA,MAAMgB,YAAY,GAAIJ,IAAD,KAAW;AAC/BzB,EAAAA,EAAE,EAAElB,OAAO,CAACmB,QAAR,EAD2B;AAE/BK,EAAAA,OAAO,EAAEmB,IAFsB;AAG/BvB,EAAAA,IAAI,EAAE;AACLF,IAAAA,EAAE,EAAE,CADC;AAELG,IAAAA,QAAQ,EAAE;AAFL;AAHyB,CAAX,CAArB;;AASA,MAAM2B,OAAO,GAAG,CAACC,KAAK,GAAG7C,YAAT,EAAuB8C,MAAvB,KAAkC;AACjD,SAAOjD,OAAO,CAACgD,KAAD,EAASE,KAAD,IAAW;AAChC,YAAQD,MAAM,CAACN,IAAf;AACC,WAAKX,gBAAL;AACCkB,QAAAA,KAAK,CAAC5C,cAAN,GAAuB,IAAvB;AACA4C,QAAAA,KAAK,CAAC3C,WAAN,GAAoB,KAApB;AACA2C,QAAAA,KAAK,CAAC1C,YAAN,GAAqB,IAArB;AACA;;AACD,WAAKyB,gBAAL;AACCiB,QAAAA,KAAK,CAAC5C,cAAN,GAAuB,KAAvB;AACA4C,QAAAA,KAAK,CAAC3C,WAAN,GAAoB,IAApB;AACA2C,QAAAA,KAAK,CAAC9C,SAAN,CAAgB+C,OAAhB,CAAwBN,UAAU,CAACI,MAAM,CAACP,IAAR,CAAlC;AACA;;AACD,WAAKR,gBAAL;AACCgB,QAAAA,KAAK,CAAC5C,cAAN,GAAuB,KAAvB;AACA4C,QAAAA,KAAK,CAAC1C,YAAN,GAAqByC,MAAM,CAACG,KAA5B;AACA;;AACD,WAAKjB,mBAAL;AACCe,QAAAA,KAAK,CAACG,iBAAN,GAA0B,IAA1B;AACAH,QAAAA,KAAK,CAACI,cAAN,GAAuB,KAAvB;AACAJ,QAAAA,KAAK,CAACK,eAAN,GAAwB,IAAxB;AACA;;AACD,WAAKnB,mBAAL;AACCc,QAAAA,KAAK,CAAC9C,SAAN,GAAkB8C,KAAK,CAAC9C,SAAN,CAAgBoD,MAAhB,CAAwBC,CAAD,IAAOA,CAAC,CAACxC,EAAF,KAASgC,MAAM,CAACP,IAA9C,CAAlB;AACAQ,QAAAA,KAAK,CAACG,iBAAN,GAA0B,KAA1B;AACAH,QAAAA,KAAK,CAACI,cAAN,GAAuB,IAAvB;AACA;;AACD,WAAKjB,mBAAL;AACCa,QAAAA,KAAK,CAACG,iBAAN,GAA0B,KAA1B;AACAH,QAAAA,KAAK,CAACK,eAAN,GAAwBN,MAAM,CAACG,KAA/B;AACA;;AACD,WAAKd,mBAAL;AACCY,QAAAA,KAAK,CAACzC,iBAAN,GAA0B,IAA1B;AACAyC,QAAAA,KAAK,CAACxC,cAAN,GAAuB,KAAvB;AACAwC,QAAAA,KAAK,CAACvC,eAAN,GAAwB,IAAxB;AACA;;AACD,WAAK4B,mBAAL;AACC,cAAMmB,IAAI,GAAGR,KAAK,CAAC9C,SAAN,CAAgBuD,IAAhB,CAAsBF,CAAD,IAAOA,CAAC,CAACxC,EAAF,KAASgC,MAAM,CAACP,IAAP,CAAYkB,MAAjD,CAAb;AACAF,QAAAA,IAAI,CAAC5B,QAAL,CAAcqB,OAAd,CAAsBL,YAAY,CAACG,MAAM,CAACP,IAAP,CAAYnB,OAAb,CAAlC;AACA2B,QAAAA,KAAK,CAACzC,iBAAN,GAA0B,KAA1B;AACAyC,QAAAA,KAAK,CAACxC,cAAN,GAAuB,IAAvB;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAK8B,mBAAL;AACCU,QAAAA,KAAK,CAACzC,iBAAN,GAA0B,KAA1B,EACAyC,KAAK,CAACvC,eAAN,GAAwBsC,MAAM,CAACG,KAD/B;AAEA;;AACD;AACC;AAzDF;;AA0DC;AACD,GA5Da,CAAd;AA6DA,CA9DD;;AAgEA,eAAeL,OAAf","sourcesContent":["import shortid from 'shortid';\nimport produce from 'immer';\nimport faker, { fake } from 'faker';\n\nexport const initialState = {\n\tmainPosts: [],\n\timagePaths: [],\n\taddPostLoading: false,\n\taddPostDone: false,\n\taddPostError: null,\n\n\taddCommentLoading: false,\n\taddCommentDone: false,\n\taddCommentError: null,\n};\n\nexport const generateDummyPost = \n\ninitialState.mainPosts = initialState.mainPosts.concat(\n\tArray(20).fill().map(() => ({\n\t\tid: shortid.generate(),\n\t\tUser: {\n\t\t\tid: shortid.generate(),\n\t\t\tnickname: faker.name.findName(),\n\t\t},\n\t\tcontent: faker.lorem.paragraph(),\n\t\tImages: [{\n\t\t\tsrc: faker.image.imageUrl(),\n\t\t}],\n\t\tComments: [{\n\t\t\tUser: {\n\t\t\t\tid: shortid.generate(),\n\t\t\t\tnickname: faker.name.findName(),\n\t\t\t},\n\t\t\tcontent: faker.lorem.sentence(),\n\t\t}],\n\t}))\n);\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const addPost = (data) => ({\n\ttype: ADD_POST_REQUEST,\n\tdata,\n});\n\nexport const addComment = (data) => ({\n\ttype: ADD_COMMENT_REQUEST,\n\tdata,\n});\n\nconst dummyPosts = (data) => ({\n\tid: data.id,\n\tcontent: data.content,\n\tUser: {\n\t\tid: 1,\n\t\tnickname: '바보~',\n\t},\n\tImages: [],\n\tComments: []\n});\n\nconst dummyComment = (data) => ({\n\tid: shortid.generate(),\n\tcontent: data,\n\tUser: {\n\t\tid: 1,\n\t\tnickname: '바보~',\n\t},\n});\n\nconst reducer = (state = initialState, action) => {\n\treturn produce(state, (draft) => {\n\t\tswitch (action.type) {\n\t\t\tcase ADD_POST_REQUEST:\n\t\t\t\tdraft.addPostLoading = true;\n\t\t\t\tdraft.addPostDone = false;\n\t\t\t\tdraft.addPostError = null;\n\t\t\t\tbreak;\n\t\t\tcase ADD_POST_SUCCESS:\n\t\t\t\tdraft.addPostLoading = false;\n\t\t\t\tdraft.addPostDone = true;\n\t\t\t\tdraft.mainPosts.unshift(dummyPosts(action.data));\n\t\t\t\tbreak;\n\t\t\tcase ADD_POST_FAILURE:\n\t\t\t\tdraft.addPostLoading = false;\n\t\t\t\tdraft.addPostError = action.error;\n\t\t\t\tbreak;\n\t\t\tcase REMOVE_POST_REQUEST:\n\t\t\t\tdraft.removePostLoading = true;\n\t\t\t\tdraft.removePostDone = false;\n\t\t\t\tdraft.removePostError = null;\n\t\t\t\tbreak;\n\t\t\tcase REMOVE_POST_SUCCESS:\n\t\t\t\tdraft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n\t\t\t\tdraft.removePostLoading = false;\n\t\t\t\tdraft.removePostDone = true;\n\t\t\t\tbreak;\n\t\t\tcase REMOVE_POST_FAILURE:\n\t\t\t\tdraft.removePostLoading = false;\n\t\t\t\tdraft.removePostError = action.error;\n\t\t\t\tbreak;\n\t\t\tcase ADD_COMMENT_REQUEST:\n\t\t\t\tdraft.addCommentLoading = true;\n\t\t\t\tdraft.addCommentDone = false;\n\t\t\t\tdraft.addCommentError = null;\n\t\t\t\tbreak;\n\t\t\tcase ADD_COMMENT_SUCCESS:\n\t\t\t\tconst post = draft.mainPosts.find((v) => v.id === action.data.postId);\n\t\t\t\tpost.Comments.unshift(dummyComment(action.data.content));\n\t\t\t\tdraft.addCommentLoading = false;\n\t\t\t\tdraft.addCommentDone = true;\n\t\t\t\tbreak;\n\t\t\t// \tconst postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n\t\t\t// \tconst post = { ...state.mainPosts[postIndex] };\n\t\t\t// \tpost.Comments = [dummyComment(action.data.content), ...post.Comments];\n\t\t\t// \tconst mainPosts = [...state.mainPosts];\n\t\t\t// \tmainPosts[postIndex] = post;\n\t\t\t// \treturn {\n\t\t\t// \t\t...state,\n\t\t\t// \t\tmainPosts,\n\t\t\t// \t\taddCommentLoading: false,\n\t\t\t// \t\taddCommentDone: true,\n\t\t\t// \t};\n\t\t\t// }\n\t\t\tcase ADD_COMMENT_FAILURE:\n\t\t\t\tdraft.addCommentLoading = false,\n\t\t\t\tdraft.addCommentError = action.error;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t};\n\t});\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}